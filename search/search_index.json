{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Homepage \u00b6","title":"Homepage"},{"location":"#homepage","text":"","title":"Homepage"},{"location":"tags/","text":"","title":"Tags"},{"location":"blog/career_ladder/","text":"12.23 \u804c\u4e1a\u7684\u4fe1\u4efb\u9636\u68af \u00b6 The Career Trust Ladder From a new grad to a Leader, your career journey is all about gaining trust. It goes like this Can you be trusted to complete a task \u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1 solve a problem \u89e3\u51b3\u4e00\u4e2a\u95ee\u9898 solve a problem while partnering well with others \u548c\u4ed6\u4eba\u4e00\u8d77\u89e3\u51b3\u95ee\u9898 figure out the right problems to solve \u641e\u6e05\u695a\u8981\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898 inspire others to solve the right problems \u9f13\u52b1\u4ed6\u4eba\u53bb\u89e3\u51b3\u771f\u6b63\u7684\u95ee\u9898 \u6211\u73b0\u5728\u5927\u6982\u662f\u5728\u7b2c\u4e09\u5c42\u5230\u7b2c\u56db\u5c42\u7684\u8def\u4e0a\u3002 \u6709\u80fd\u529b\u548c\u4ed6\u4eba\u4e00\u8d77\u53bb\u89e3\u51b3\u80fd\u529b\uff0c\u4f46\u662f\u5bf9\u4e8e\u8981\u89e3\u51b3\u4ec0\u4e48\u6837\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u70b9\u6a21\u7cca\u3002","title":"Career ladder"},{"location":"blog/career_ladder/#1223","text":"The Career Trust Ladder From a new grad to a Leader, your career journey is all about gaining trust. It goes like this Can you be trusted to complete a task \u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1 solve a problem \u89e3\u51b3\u4e00\u4e2a\u95ee\u9898 solve a problem while partnering well with others \u548c\u4ed6\u4eba\u4e00\u8d77\u89e3\u51b3\u95ee\u9898 figure out the right problems to solve \u641e\u6e05\u695a\u8981\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898 inspire others to solve the right problems \u9f13\u52b1\u4ed6\u4eba\u53bb\u89e3\u51b3\u771f\u6b63\u7684\u95ee\u9898 \u6211\u73b0\u5728\u5927\u6982\u662f\u5728\u7b2c\u4e09\u5c42\u5230\u7b2c\u56db\u5c42\u7684\u8def\u4e0a\u3002 \u6709\u80fd\u529b\u548c\u4ed6\u4eba\u4e00\u8d77\u53bb\u89e3\u51b3\u80fd\u529b\uff0c\u4f46\u662f\u5bf9\u4e8e\u8981\u89e3\u51b3\u4ec0\u4e48\u6837\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u70b9\u6a21\u7cca\u3002","title":"12.23 \u804c\u4e1a\u7684\u4fe1\u4efb\u9636\u68af"},{"location":"blog/personal_workflow/","text":"12.25 \u5f62\u6210\u4e2a\u4eba\u7684Workflow \uff08in progress\uff09 \u00b6 \u4ec0\u4e48\u662f\u4e2a\u4eba\u7684Workflow \u00b6 workflow\u7684\u4ea7\u51fa\u662f\u5565\uff1f \u4e00\u4e2a\u9879\u76ee\u3002 workflow\u7684\u6267\u884c\u8005\u662f\u8c01\uff1f \u6211\u3002 workflow\u957f\u4ec0\u4e48\u6837\uff1f \u91cc\u9762\u5305\u542b\u4e86\u5f88\u591a\u4e2a\u6a21\u5757\uff0c\u5177\u4f53\u770b\u540e\u9762\u3002 \u8fd9\u4e2a\u662f\u62112023\u5e74\u7684\u4e00\u4e2a\u5c0f\u76ee\u6807 \u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u4e2a\u4eba\u7684Workflow? \u00b6 \u51cf\u5c11\u91cd\u590d\u5de5\u4f5c \u6807\u51c6\u5316\uff0c\u5b9e\u73b0\u53ef\u590d\u73b0project\uff0c\u6bd4\u5982\u8bf4\u6709\u4ee3\u7801+\u6587\u6863+okr\uff0c\u5c31\u80fd\u8f7b\u677e\u590d\u73b0\u4e00\u4e2aproject \u5982\u4f55\u5efa\u7acb\u4e2a\u4eba\u7684Workflow? \u00b6 \u968f\u4fbf\u60f3\u5230\u51e0\u70b9workflow\u4e2d\u7684\u51e0\u4e2a\u6a21\u5757\uff0c 1. \u9700\u6c42\u6536\u96c6\uff08\u9700\u8981\u95ee\u7528\u6237\u54ea\u4e9b\u95ee\u9898\uff09 2. \u672c\u5730\u548c\u7ebf\u4e0a\u7684\u5f00\u53d1\u73af\u5883\uff0c\u6d4b\u8bd5\u73af\u5883 3. \u6587\u6863\u7684\u7ba1\u7406\uff0c\u4ecedesign, test, release, manual\u4ee5\u53ca\u65e5\u540e\u7684\u7ef4\u62a4\u66f4\u65b0 4. \u9879\u76ee\u7ba1\u7406\uff0c\u5982\u4f55break down\u4e00\u4e2a\u5927\u7684project\uff0c\u7528\u4ec0\u4e48\u5f62\u5f0f\u8fdb\u884c\u5448\u73b0","title":"Personal workflow"},{"location":"blog/personal_workflow/#1225-workflow-in-progress","text":"","title":"12.25 \u5f62\u6210\u4e2a\u4eba\u7684Workflow \uff08in progress\uff09"},{"location":"blog/personal_workflow/#workflow","text":"workflow\u7684\u4ea7\u51fa\u662f\u5565\uff1f \u4e00\u4e2a\u9879\u76ee\u3002 workflow\u7684\u6267\u884c\u8005\u662f\u8c01\uff1f \u6211\u3002 workflow\u957f\u4ec0\u4e48\u6837\uff1f \u91cc\u9762\u5305\u542b\u4e86\u5f88\u591a\u4e2a\u6a21\u5757\uff0c\u5177\u4f53\u770b\u540e\u9762\u3002 \u8fd9\u4e2a\u662f\u62112023\u5e74\u7684\u4e00\u4e2a\u5c0f\u76ee\u6807 \u3002","title":"\u4ec0\u4e48\u662f\u4e2a\u4eba\u7684Workflow"},{"location":"blog/personal_workflow/#workflow_1","text":"\u51cf\u5c11\u91cd\u590d\u5de5\u4f5c \u6807\u51c6\u5316\uff0c\u5b9e\u73b0\u53ef\u590d\u73b0project\uff0c\u6bd4\u5982\u8bf4\u6709\u4ee3\u7801+\u6587\u6863+okr\uff0c\u5c31\u80fd\u8f7b\u677e\u590d\u73b0\u4e00\u4e2aproject","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u4e2a\u4eba\u7684Workflow?"},{"location":"blog/personal_workflow/#workflow_2","text":"\u968f\u4fbf\u60f3\u5230\u51e0\u70b9workflow\u4e2d\u7684\u51e0\u4e2a\u6a21\u5757\uff0c 1. \u9700\u6c42\u6536\u96c6\uff08\u9700\u8981\u95ee\u7528\u6237\u54ea\u4e9b\u95ee\u9898\uff09 2. \u672c\u5730\u548c\u7ebf\u4e0a\u7684\u5f00\u53d1\u73af\u5883\uff0c\u6d4b\u8bd5\u73af\u5883 3. \u6587\u6863\u7684\u7ba1\u7406\uff0c\u4ecedesign, test, release, manual\u4ee5\u53ca\u65e5\u540e\u7684\u7ef4\u62a4\u66f4\u65b0 4. \u9879\u76ee\u7ba1\u7406\uff0c\u5982\u4f55break down\u4e00\u4e2a\u5927\u7684project\uff0c\u7528\u4ec0\u4e48\u5f62\u5f0f\u8fdb\u884c\u5448\u73b0","title":"\u5982\u4f55\u5efa\u7acb\u4e2a\u4eba\u7684Workflow?"},{"location":"service/rest_rpc/","text":"REST, RPC \u00b6 REST (REpresentational State Transfer) is a software architectural style . It's a style. You can understand it like - we have HTTP, and engineers found out a code structure style that works very well for backend-frontend communication via HTTP. gRPC grpc.io/ (opens new window)is an open-source framework (Originally developed by Google). It is a framework. So you use it just like other frameworks/libraries - you install it by cloning the GitHub repo, or from a package manager (e.g. Web runtime library is npm i grpc-web). It supports all the common backend/frontend languages. REST \u00b6 Pros and Cons \u00b6 Pros Just HTTP calls. HTTP is the backbone of the web, so any platform / language come with it. You use it almost anywhere - within your app, inside browser devtool, or just curl. Easy to build. As you can see above, it's just a few lines of code to build and use REST API. (But building a good one definitely requires more work) Cons Need the backend and the frontend in sync. As you can see, there's no contract between the backend and the frontend. The frontend has to know the path, method, request format, etc. And whenever the backend changes, the frontend also needs to keep changes in sync manually. Easy to write messy APIs. You have the total control of what you do, so you can have APIs with inconsistent naming, behavior. E.g. Nothing prevents you from making GET /list delete all the items. GRPC \u00b6 High-performance, minimal payload In gRPC, the structure is defined in the code, and only data is transferred. Implementation \u00b6 Once you have the proto definition, you load the proto file into your backend to implement the API features. And you run a command to generate the client-side code and use that in the frontend code. Reference \u00b6 https://liyangguang.com/blog/2020/05/rest-grpc-graphql/","title":"REST, RPC"},{"location":"service/rest_rpc/#rest-rpc","text":"REST (REpresentational State Transfer) is a software architectural style . It's a style. You can understand it like - we have HTTP, and engineers found out a code structure style that works very well for backend-frontend communication via HTTP. gRPC grpc.io/ (opens new window)is an open-source framework (Originally developed by Google). It is a framework. So you use it just like other frameworks/libraries - you install it by cloning the GitHub repo, or from a package manager (e.g. Web runtime library is npm i grpc-web). It supports all the common backend/frontend languages.","title":"REST, RPC"},{"location":"service/rest_rpc/#rest","text":"","title":"REST"},{"location":"service/rest_rpc/#pros-and-cons","text":"Pros Just HTTP calls. HTTP is the backbone of the web, so any platform / language come with it. You use it almost anywhere - within your app, inside browser devtool, or just curl. Easy to build. As you can see above, it's just a few lines of code to build and use REST API. (But building a good one definitely requires more work) Cons Need the backend and the frontend in sync. As you can see, there's no contract between the backend and the frontend. The frontend has to know the path, method, request format, etc. And whenever the backend changes, the frontend also needs to keep changes in sync manually. Easy to write messy APIs. You have the total control of what you do, so you can have APIs with inconsistent naming, behavior. E.g. Nothing prevents you from making GET /list delete all the items.","title":"Pros and Cons"},{"location":"service/rest_rpc/#grpc","text":"High-performance, minimal payload In gRPC, the structure is defined in the code, and only data is transferred.","title":"GRPC"},{"location":"service/rest_rpc/#implementation","text":"Once you have the proto definition, you load the proto file into your backend to implement the API features. And you run a command to generate the client-side code and use that in the frontend code.","title":"Implementation"},{"location":"service/rest_rpc/#reference","text":"https://liyangguang.com/blog/2020/05/rest-grpc-graphql/","title":"Reference"},{"location":"tags/","text":"","title":"Tags"}]}